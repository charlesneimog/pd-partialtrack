#include "pd-simpl.hpp"

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#include <loris.h>
#pragma GCC diagnostic warning "-Wdeprecated-declarations"

static t_class *LorisPt;

// ==============================================
typedef struct _LorisPt {
    t_object xObj;
    t_sample xSample; // audio to fe used in CLASSMAINSIGIN

    // Audio
    double *in;
    t_int audioInBlockIndex;
    t_int n;
    unsigned int HopSize;

    // Outlet/Inlet
    t_outlet *sigOut;

} t_LorisPt;

// ==============================================
static t_int *LorisPtAudioPerform(t_int *w) {
    t_LorisPt *x = (t_LorisPt *)(w[1]);
    t_sample *in = (t_sample *)(w[2]);
    int n = (int)(w[3]);

    x->n = n;
    for (int i = 0; i < n; i++) {
        x->in[x->audioInBlockIndex] = (double)in[i];
        x->audioInBlockIndex++;
        if (x->audioInBlockIndex == x->HopSize) {
            double FUND = 440;
            x->audioInBlockIndex = 0;
            analyzer_configure(100, 120);
            analyzer_setFreqDrift(.2 * FUND);

            PartialList *partials = createPartialList();
            analyze(x->in, x->HopSize, (double)48000, partials);

            // destroyPartialList(partials);
        }
    }

    return (w + 4);
}

// ==============================================
static void LorisPtAddDsp(t_LorisPt *x, t_signal **sp) {
    dsp_add(LorisPtAudioPerform, 3, x, sp[0]->s_vec, (t_int)sp[0]->s_n);
}

// ==============================================
static void *NewLorisPt(t_symbol *synth) {
    t_LorisPt *x = (t_LorisPt *)pd_new(LorisPt);
    x->sigOut = outlet_new(&x->xObj, &s_anything);
    x->HopSize = 4096;
    x->in = new double[x->HopSize];

    return x;
}

// ==============================================
void s_loris_pt_tilde_setup(void) {
    LorisPt = class_new(gensym("s-loris-pt~"), (t_newmethod)NewLorisPt, NULL,
                        sizeof(t_LorisPt), CLASS_DEFAULT, A_DEFSYMBOL, 0);

    CLASS_MAINSIGNALIN(LorisPt, t_LorisPt, xSample);
    class_addmethod(LorisPt, (t_method)LorisPtAddDsp, gensym("dsp"), A_CANT, 0);
}
